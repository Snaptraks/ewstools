#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 20 21:14:04 2018

@author: Thomas Bury
"""

import numpy as np

# Function to compute the initialisation value for mu when fitting Shopf
def mu_init(smax, stot, wdom):
    
    # define chunky term (use \ to continue eqn to new line)
    def alpha(smax, stot, wdom):
        return -stot**3 \
        - 9*(np.pi**2)*(wdom**2)*(smax**2)*stot \
        +3*np.pi*np.sqrt(
                192*(np.pi**4)*(wdom**6)*(smax**6) \
                -39*(np.pi**2)*(wdom**4)*(smax**4)*(stot**2) \
                +6*(wdom**2)*(smax**2)*(stot**4) \
                )
        
    return  -(1/(3*np.pi*smax))*(stot \
             -alpha(smax,stot,wdom)**(1/3) \
             -(stot**2-12*(np.pi**2)*(wdom**2)*(smax**2))/(alpha(smax,stot,wdom)**(1/3)))
    
# Function to compute the initialisation value for sigma when fitting Shopf
def sigma_init_hopf(smax,stot,wdom):
    return np.sqrt(
            -2*mu_init(smax,stot,wdom)*stot)
    
# Function to compute the initialisation value for sigma when fitting Sfold
def sigma_init_fold(smax,stot):
    return np.sqrt(
            2*stot**2/(np.pi*smax)
            )

# Function to compute the initialisation value for lambda when fitting Sfold
def lambda_init(smax,stot):
    return -stot/(np.pi*smax)


    
# Test Hopf params
mu=mu_init(1,1,1)
sigma=sigma_init_hopf(1,1,1) 
wdom=1   

smax_out=(sigma**2/(4*np.pi*mu**2))*(1+mu**2/(mu**2+4*wdom**2))
stot_out=-sigma**2/(2*mu)







